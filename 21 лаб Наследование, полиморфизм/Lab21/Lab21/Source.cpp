#include <iostream>

#include "Pair.h"
#include "Fraction.h"

using namespace std;
// Функция для возврата объекта как результата
Pair make_pair()
{
    int a;
    int b;
    
    cout << endl << "Введите первое число: ";
    cin >> a;
    cout << endl << "Введите второе число: ";
    cin>>b;
    
    Pair p(a,b);

    return p;
}

// Функция для передачи объекта как параметра
void print_pair(Pair p)
{
    p.Show();
}
int main() {
    setlocale(LC_ALL, "rus");
    system("chcp 1251");
    system("cls");
    //Работа с базовым классом
    cout << "Базовый класс" << endl;
    // Использование конструктора без параметров
    Pair p1=Pair();
    p1.Show();

    // Использование конструктора с параметром
    Pair p2 = Pair(2,5);
    p2.Show();

    // Использование конструктора копирования
    Pair p3 = p2;
    p3.Show();

    // использование модификаторов
    p3.set_first(5);
    p3.set_second(3);
   
    // Вывод с использованием селекторов
    int FN;
    int SN;

    FN = p2.get_first();
    SN = p2.get_second();

    cout << "Первое число: " << FN << endl;
    cout << "Второе число: " << SN << endl;

    // Функция, принимающая объект производного класса
    print_pair(p3);

    // Функция, возвращающая объект, как результат
    p1 = make_pair();
    p1.Show();

    // использование перегруженных операций присваивания
    Pair p4 = Pair();
    p4 = p3;
    cout <<endl<< p4 << endl;
    // использование перегруженных операций сравнения
    cout << "Сравнение пар"<<endl;
    p2.Show();
    p3.Show();
    if (p2 > p3)
    {
        cout << "Первая пара чисел больше второй";
    }
    else
    {
        cout << "Вторая пара чисел больше или равна первой";
    }
    
    // Использование перегруженного оператора ввода
    cin >> p4;

    // Использование перегруженного оператора вывода
    cout << p4 << endl << endl;
   
    cout << "Производный класс"<<endl;
    //Работа с производным классом
        // Использование конструктора без параметров
    Fraction f1 = Fraction();
    f1.Show();

    // Использование конструктора с параметром
    Fraction f2 = Fraction(2, 5);
    f2.Show();

    // Использование конструктора копирования
    Fraction f3 = f2;
    f3.Show();

    // использование модификаторов
    f3.set_first(5);
    f3.set_second(3);

    // Вывод с использованием селекторов
    int F1;
    int F2;

    F1 = f2.get_first();
    F2 = f2.get_second();

    cout << "Первое число: " << F1 << endl;
    cout << "Второе число: " << F2 << endl;

    // использование перегруженных операций присваивания
    Fraction f4 = Fraction();
    f4 = f3;

    // использование перегруженных операций сравнения
    //использование перегруженных операций вывода
    cout << "Сравнение пар" << endl;
    cout<<f2;
    cout<<f3;
    if (f2 > f3)
    {
        cout << "Первое число больше второго"<<endl;
    }
    else
    {
        cout << "Второе число больше или равно первому"<<endl;
    }
    if (f2 < f3)
    {
        cout << "Первое число меньше второго"<<endl;
    }
    else
    {
        cout << "Второе число меньше или равно первому"<<endl;
    }
    cout << f1;
    cout << f3;
    if (f1 >= f3)
    {
        cout << "Первое число больше или равно второму" << endl;
    }
    else
    {
        cout << "Второе число больше первого" << endl;
    }
    if (f2 < f3)
    {
        cout << "Первое число меньше или равно второму" << endl;
    }
    else
    {
        cout << "Второе число меньше первого" << endl;
    }
    // Использование перегруженного оператора ввода
    cin >> f4;

    // Использование перегруженного оператора вывода
    cout << f4;

    return 0;
}